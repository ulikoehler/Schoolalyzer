/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DocumentMergerFrame.java
 *
 * Created on 28.01.2011, 16:31:37
 */
package schoolalyzer;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SpinnerListModel;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import schoolalyzer.ui.ExcelColumnNameList;
import schoolalyzer.util.POIUtil;

/**
 *
 * @author uli
 */
public class DocumentMergerFrame extends javax.swing.JFrame {

    //File choosers
    private JFileChooser outputChooser = new JFileChooser();
    private JFileChooser inputFileChooser = new JFileChooser();
    //Logging
    private static final Logger logger = Logger.getLogger(DocumentMergerFrame.class.getName());
    //Status variables
    boolean inputsSet = false;
    boolean outputSet = false;
    //IO data
    private List<Workbook> inputWorkbooks = null;
    private Workbook outputWorkbook = null;
    private File outputWorkbookFile = null;

    /** Creates new form DocumentMergerFrame */
    public DocumentMergerFrame() {
        initComponents();
        setLocationRelativeTo(null);
        setLocationRelativeTo(null);
    }

    /**
     * Saves the output workbook in the output file
     */
    private void saveOutputWorkbook() throws IOException {
        OutputStream os = new BufferedOutputStream(new FileOutputStream(outputWorkbookFile));
        outputWorkbook.write(os);
        os.close();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        okButton = new javax.swing.JButton();
        outputFileLabel = new javax.swing.JLabel();
        selectInputFilesButton = new javax.swing.JButton();
        inputFilesLabel = new javax.swing.JLabel();
        inputStatusLabel = new javax.swing.JLabel();
        outputStatusLabel = new javax.swing.JLabel();
        selectOutputFileButton = new javax.swing.JButton();
        startRowLabel = new javax.swing.JLabel();
        startRowSpinner = new schoolalyzer.ui.NumberSpinner();
        startColLabel = new javax.swing.JLabel();
        startColSpinner = new javax.swing.JSpinner();
        sheetIndexLabel = new javax.swing.JLabel();
        sheetIndexSpinner = new schoolalyzer.ui.NumberSpinner();

        setTitle("Schoolalyzer - Dokumente zusammenführen");

        okButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/schoolalyzer/icons/task-complete.png"))); // NOI18N
        okButton.setText("Zusammenführen");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        outputFileLabel.setText("Ausgabedatei:");

        selectInputFilesButton.setText("Auswählen");
        selectInputFilesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectInputFilesButtonActionPerformed(evt);
            }
        });

        inputFilesLabel.setText("Eingabedateien:");

        inputStatusLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/schoolalyzer/icons/dialog-information.png"))); // NOI18N
        inputStatusLabel.setText("Bitte Eingabedateien laden!");

        outputStatusLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/schoolalyzer/icons/dialog-information.png"))); // NOI18N
        outputStatusLabel.setText("Bitte Ausgabedatei auswählen !");

        selectOutputFileButton.setText("Auswählen");
        selectOutputFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectOutputFileButtonActionPerformed(evt);
            }
        });

        startRowLabel.setText("Ab Zeile:");

        startRowSpinner.setIntValue(1);

        startColLabel.setText("Ab Spalte:");

        startColSpinner.setModel(new SpinnerListModel(new ExcelColumnNameList()));

        sheetIndexLabel.setText("Blattnummer:");

        sheetIndexSpinner.setIntValue(1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(okButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 559, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inputFilesLabel)
                            .addComponent(outputFileLabel)
                            .addComponent(sheetIndexLabel)
                            .addComponent(startRowLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(sheetIndexSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE)
                                .addComponent(startRowSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE))
                            .addComponent(startColSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(selectOutputFileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(selectInputFilesButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(inputStatusLabel)
                                    .addComponent(outputStatusLabel))))
                        .addGap(20, 20, 20))
                    .addComponent(startColLabel))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sheetIndexLabel)
                    .addComponent(sheetIndexSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startRowLabel)
                    .addComponent(startRowSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startColLabel)
                    .addComponent(startColSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputFilesLabel)
                    .addComponent(selectInputFilesButton)
                    .addComponent(inputStatusLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectOutputFileButton)
                    .addComponent(outputFileLabel)
                    .addComponent(outputStatusLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(okButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed

        outputWorkbook = new HSSFWorkbook();
        if (!outputSet) {
            JOptionPane.showMessageDialog(this, "Bitte Ausgabedatei setzen!", "Ausgabedatei nicht gesetzt", JOptionPane.ERROR_MESSAGE, SchoolalyzerFrame.errorIcon);
            return;
        }
        if (!inputsSet) {
            JOptionPane.showMessageDialog(this, "Bitte Eingabedateien laden!", "Eingabedateien nicht geladen", JOptionPane.ERROR_MESSAGE, SchoolalyzerFrame.errorIcon);
            return;
        }
        //Get the output sheet
        Sheet outputSheet = outputWorkbook.getSheetAt(0); //Always get first sheet
        //Read the start and the stop row
        int sheetNum = sheetIndexSpinner.getIntValue();
        int startRow = startRowSpinner.getIntValue() - 1; //-1: 1-based must be converted to 0-based
        int startCol = POIUtil.getColumnNumber(((SpinnerListModel) startColSpinner.getModel()).getValue().toString());
        int currentOutputColIndex = 0;
        int currentOutputRowIndex = 0;
        for (Workbook inputWorkbook : inputWorkbooks) {
            Sheet inputSheet = inputWorkbook.getSheetAt(sheetNum);
            int currentInputRowIndex = startRow;
            while (true) //Iterate over all rows
            {
                //If the first column to process (=startCol) in this row is empty
                if (POIUtil.isEmpty(inputSheet, currentInputRowIndex, startCol)) {
                    break;
                }
                currentOutputColIndex = 0;
                int currentInputColIndex = startCol;
                while (true) //Iterate over the columns in the current row until one is empty
                {
                    if (POIUtil.isEmpty(inputSheet, currentInputRowIndex, currentInputColIndex)) {
                        break;
                    }
                    //The cell is not empty --> copy the value into the output document
                    String cellValue = POIUtil.getStringCellValueSafe(inputSheet, currentInputRowIndex, currentOutputColIndex);
                    POIUtil.setCellValueSafe(outputSheet, currentOutputRowIndex, currentOutputColIndex, cellValue);
                    currentInputColIndex++;
                    currentOutputColIndex++;
                }
                currentInputRowIndex++;
                currentOutputRowIndex++;
            }
        }
        try {
            //Save the output workbook
            saveOutputWorkbook();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Fehler beim Schreiben des Dokuments: " + ex.getLocalizedMessage(), "Schreibfehler", JOptionPane.ERROR_MESSAGE, SchoolalyzerFrame.errorIcon);

        }
        JOptionPane.showMessageDialog(this, "Die Berechnung wurde erfolgreich abgeschlossen!", "Erfolg", JOptionPane.INFORMATION_MESSAGE, SchoolalyzerFrame.okIcon);
}//GEN-LAST:event_okButtonActionPerformed

    private void selectInputFilesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectInputFilesButtonActionPerformed
        //Let the user select the files to load
        inputFileChooser.setDialogTitle("Eingabedateien auswählen");
        inputFileChooser.setMultiSelectionEnabled(true);
        if (inputFileChooser.showOpenDialog(this) != JFileChooser.APPROVE_OPTION) {
            return;
        }
        File[] dataFiles = inputFileChooser.getSelectedFiles();
        if (dataFiles.length == 0) {
            return; //No files to be processed
        }
        //Reset the input workbook data
        try {
            for (File dataFile : dataFiles) {
                inputWorkbooks.add(POIUtil.loadWorkbook(dataFile));
            }
        } catch (IOException ex) {
            inputStatusLabel.setIcon(SchoolalyzerFrame.errorIcon);
            inputStatusLabel.setText("Eingabefehler - bitte Vorlage erneut laden!");
            inputsSet = false;
            return;
        } catch (InvalidFormatException ex) {
            JOptionPane.showMessageDialog(this, "Fehler beim Lesen der Vorlage: Das Dateiformat wird nicht unterstützt: " + ex.getLocalizedMessage(), "Format nicht unterstützt", JOptionPane.ERROR_MESSAGE, SchoolalyzerFrame.errorIcon);
            inputStatusLabel.setIcon(SchoolalyzerFrame.errorIcon);
            inputStatusLabel.setText("Formatfehler - bitte Vorlage erneut laden!");
            inputsSet = false;
            return;
        }
        //Set the status message
        inputsSet = true;
        inputStatusLabel.setIcon(SchoolalyzerFrame.okIcon);
        inputStatusLabel.setText(dataFiles.length + " Eingabedateien erfolgreich geladen");
}//GEN-LAST:event_selectInputFilesButtonActionPerformed

    private void selectOutputFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectOutputFileButtonActionPerformed
        outputChooser.setDialogTitle("Select the output file");
        if (outputChooser.showSaveDialog(this) != JFileChooser.APPROVE_OPTION) {
            return;
        }
        outputSet = false;
        File tempOutputFile = outputChooser.getSelectedFile();
        if (tempOutputFile.exists()) {
            int overwrite = JOptionPane.showConfirmDialog(this, "Datei existiert - überschreiben?", "Überschreiben", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (overwrite != JOptionPane.YES_OPTION) {
                return;
            }
        }
        if (!tempOutputFile.canWrite() && (!tempOutputFile.exists() && !tempOutputFile.getParentFile().canWrite())) {
            JOptionPane.showMessageDialog(this, "In diese Datei kann nicht geschrieben werden! Bitte andere Ausgabedatei wählen!", "Schreiben nicht erlaubt", JOptionPane.ERROR_MESSAGE, SchoolalyzerFrame.errorIcon);
            return;
        }
        //Everything's OK, so set the status label and the output file member variable
        outputWorkbookFile = tempOutputFile;
        outputStatusLabel.setIcon(SchoolalyzerFrame.okIcon);
        outputStatusLabel.setText("Ausgabedatei erfolgreich gesetzt");
        outputSet = true;
}//GEN-LAST:event_selectOutputFileButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new DocumentMergerFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel inputFilesLabel;
    private javax.swing.JLabel inputStatusLabel;
    private javax.swing.JButton okButton;
    private javax.swing.JLabel outputFileLabel;
    private javax.swing.JLabel outputStatusLabel;
    private javax.swing.JButton selectInputFilesButton;
    private javax.swing.JButton selectOutputFileButton;
    private javax.swing.JLabel sheetIndexLabel;
    private schoolalyzer.ui.NumberSpinner sheetIndexSpinner;
    private javax.swing.JLabel startColLabel;
    private javax.swing.JSpinner startColSpinner;
    private javax.swing.JLabel startRowLabel;
    private schoolalyzer.ui.NumberSpinner startRowSpinner;
    // End of variables declaration//GEN-END:variables
}
