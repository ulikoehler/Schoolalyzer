/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DocumentMergerFrame.java
 *
 * Created on 28.01.2011, 16:31:37
 */
package schoolalyzer;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SpinnerListModel;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import schoolalyzer.ui.ExcelColumnNameList;
import schoolalyzer.util.POIUtil;

/**
 *
 * @author uli
 */
public class DataValidationFrame extends javax.swing.JFrame {

    //File choosers
    private JFileChooser inputFileChooser = new JFileChooser(new File("."));
    //Logging
    private static final Logger logger = Logger.getLogger(DataValidationFrame.class.getName());
    //Status variables
    boolean inputsSet = false;
    //IO data
    private List<Workbook> inputWorkbooks = new LinkedList<Workbook>();
    private HashMap<Workbook, String> workbookToFilename = new HashMap<Workbook, String>();
    //Constraints
    private HashMap<Integer, Constraint> constraints = new HashMap<Integer, Constraint>();
    private Constraint currentConstraint = null;

    private class Constraint {

        public String name = null;
        public String param = null;

        public Constraint(String name, String param) {
            this.name = name;
            this.param = param;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getParam() {
            return param;
        }

        public void setParam(String param) {
            this.param = param;
        }
    }

    /** Creates new form DocumentMergerFrame */
    public DataValidationFrame() {
        initComponents();
        setLocationRelativeTo(null);
        setLocationRelativeTo(null);
    }

    private ComboBoxModel getConstraintsModel() {
        List<String> list = new LinkedList<String>();
        list.add("Keine");
        list.add("Nichtleer");
        list.add("Leer");
        list.add("Zahl");
        list.add("Zahl oder leer");
        list.add("Kleiner als");
        list.add("Größer als");
        list.add("Ist");
        list.add("Ist nicht");
        return new DefaultComboBoxModel(list.toArray(new String[list.size()]));
    }

    private String getConstraintParameterAsString() {
        return constraintParameterField.getText();
    }

    private double getConstraintParameterAsDouble() {
        try {
            return Double.parseDouble(getConstraintParameterAsString());
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Der Parameter ist keine Zahl!", "Fehler", JOptionPane.ERROR_MESSAGE);
            throw new IllegalArgumentException(ex);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        okButton = new javax.swing.JButton();
        selectInputFilesButton = new javax.swing.JButton();
        inputFilesLabel = new javax.swing.JLabel();
        inputStatusLabel = new javax.swing.JLabel();
        startRowLabel = new javax.swing.JLabel();
        startRowSpinner = new schoolalyzer.ui.NumberSpinner();
        startColLabel = new javax.swing.JLabel();
        startColSpinner = new javax.swing.JSpinner();
        sheetIndexLabel = new javax.swing.JLabel();
        sheetIndexSpinner = new schoolalyzer.ui.NumberSpinner();
        colCountLabel = new javax.swing.JLabel();
        colCountSpinner = new schoolalyzer.ui.NumberSpinner();
        constraintsLabel = new javax.swing.JLabel();
        currentColumnSpinner = new schoolalyzer.ui.NumberSpinner();
        Spalte = new javax.swing.JLabel();
        constraintTypeComboBox = new javax.swing.JComboBox();
        constraintLabel = new javax.swing.JLabel();
        parameterLabel = new javax.swing.JLabel();
        constraintParameterField = new javax.swing.JTextField();

        setTitle("Schoolalyzer - Dokumente zusammenführen");
        setIconImage(schoolalyzer.CalculationFrame.piIcon.getImage());

        okButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/schoolalyzer/icons/task-complete.png"))); // NOI18N
        okButton.setText("Überprüfen");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        selectInputFilesButton.setText("Auswählen");
        selectInputFilesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectInputFilesButtonActionPerformed(evt);
            }
        });

        inputFilesLabel.setText("Eingabedateien:");

        inputStatusLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/schoolalyzer/icons/dialog-information.png"))); // NOI18N
        inputStatusLabel.setText("Bitte Eingabedateien laden!");

        startRowLabel.setText("Ab Zeile:");

        startRowSpinner.setIntValue(1);
        startRowSpinner.setMinimum(new Integer(1));

        startColLabel.setText("Ab Spalte:");

        startColSpinner.setModel(new SpinnerListModel(new ExcelColumnNameList()));

        sheetIndexLabel.setText("Blattnummer:");

        sheetIndexSpinner.setIntValue(1);
        sheetIndexSpinner.setMinimum(new Integer(1));

        colCountLabel.setText("Spaltenanzahl:");

        colCountSpinner.setIntValue(1);
        colCountSpinner.setMinimum(new Integer(1));
        colCountSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                colCountSpinnerStateChanged(evt);
            }
        });

        constraintsLabel.setFont(new java.awt.Font("Ubuntu", 1, 15));
        constraintsLabel.setText("Bedingungen:");

        currentColumnSpinner.setValue(1);
        currentColumnSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                currentColumnSpinnerStateChanged(evt);
            }
        });

        Spalte.setText("Spalte:");

        constraintTypeComboBox.setModel(getConstraintsModel());
        constraintTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                constraintTypeComboBoxActionPerformed(evt);
            }
        });

        constraintLabel.setText("Bedingung:");

        parameterLabel.setText("Parameter:");

        constraintParameterField.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                constraintParameterFieldPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(startColLabel)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sheetIndexLabel)
                            .addComponent(startRowLabel))
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(sheetIndexSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE)
                            .addComponent(startRowSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE)
                            .addComponent(startColSpinner, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE))
                        .addGap(20, 20, 20))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(inputFilesLabel)
                        .addGap(6, 6, 6)
                        .addComponent(selectInputFilesButton)
                        .addGap(18, 18, 18)
                        .addComponent(inputStatusLabel)
                        .addGap(47, 47, 47))
                    .addComponent(okButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 629, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(constraintsLabel)
                                        .addGap(18, 18, 18)
                                        .addComponent(Spalte))
                                    .addComponent(constraintLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(constraintTypeComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(currentColumnSpinner, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(parameterLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(constraintParameterField, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(colCountLabel)
                                .addGap(18, 18, 18)
                                .addComponent(colCountSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 489, Short.MAX_VALUE)))
                        .addGap(20, 20, 20)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sheetIndexLabel)
                    .addComponent(sheetIndexSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startRowLabel)
                    .addComponent(startRowSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startColLabel)
                    .addComponent(startColSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(colCountLabel)
                    .addComponent(colCountSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputFilesLabel)
                    .addComponent(inputStatusLabel)
                    .addComponent(selectInputFilesButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(constraintsLabel)
                    .addComponent(Spalte)
                    .addComponent(currentColumnSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(constraintTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(constraintLabel)
                    .addComponent(parameterLabel)
                    .addComponent(constraintParameterField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addComponent(okButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        if (!inputsSet) {
            JOptionPane.showMessageDialog(this, "Bitte Eingabedateien laden!", "Eingabedateien nicht geladen", JOptionPane.ERROR_MESSAGE, CalculationFrame.errorIcon);
            return;
        }
        LoggingFrame loggingFrame = new LoggingFrame();
        loggingFrame.setVisible(true);
        //Read the start and the stop row
        int colCount = colCountSpinner.getIntValue();
        int sheetNum = sheetIndexSpinner.getIntValue() - 1;
        int startRow = startRowSpinner.getIntValue() - 1; //-1: 1-based must be converted to 0-based
        int startCol = POIUtil.getColumnNumber(((SpinnerListModel) startColSpinner.getModel()).getValue().toString());
        long violationCounter = 0;
        for (Workbook inputWorkbook : inputWorkbooks) {
            String filename = workbookToFilename.get(inputWorkbook);
            loggingFrame.appendLine("Datei: " + filename);
            loggingFrame.appendLine("------");
            Sheet inputSheet = inputWorkbook.getSheetAt(sheetNum);
            int currentRowIndex = startRow;
            while (true) { //Iterate over all rows
                //If all columns are empty, break
                boolean breakRowLoop = true; //Set to true if the loop iterating over all rows shouldn't be broken
                for (int i = startCol; i < (startCol + colCount); i++) { //Sets breakRowLoop to false if neccessary
                    //System.out.println("Breaking at row " + currentInputRowIndex);
                    if (!POIUtil.isEmpty(inputSheet, currentRowIndex, i)) { //Break only if all cols are empty
                        breakRowLoop = false;
                    }
                }
                if (breakRowLoop) { //Break if neccessary
                    break;
                }
                //Process the current row
                int currentColIndex = startCol;
                for (int i = startCol; i < (startCol + colCount); i++) { //Iterate over the columns in the current row until one is empty
                    Cell cell = POIUtil.getCellSafe(inputSheet, currentColIndex, i);
                    Constraint constraint = constraints.get(currentColIndex);
                    String constraintName = constraint.getName();
                    if (constraintName.equals("Keine")) {
                    } else if (constraintName.equals("Nichtleer")) {
                        if (POIUtil.isEmpty(inputSheet, currentRowIndex, i)) {
                            violationCounter++;
                            loggingFrame.appendLine("Feld " + POIUtil.getFieldIdentifier(currentColIndex, currentRowIndex) + " ist leer (sollte nicht leer sein)!");
                        }
                    } else if (constraintName.equals("Leer")) {
                        if (!POIUtil.isEmpty(inputSheet, currentRowIndex, i)) {
                            violationCounter++;
                            loggingFrame.appendLine("Feld " + POIUtil.getFieldIdentifier(currentColIndex, currentRowIndex) + " ist nicht leer (sollte leer sein)!");
                        }
                        System.out.println("x");
                    } else if (constraintName.equals("Zahl")) {
                        if (POIUtil.isEmpty(inputSheet, currentRowIndex, i)) {
                            violationCounter++;
                            loggingFrame.appendLine("Feld " + POIUtil.getFieldIdentifier(currentColIndex, currentRowIndex) + " ist leer (sollte Zahl enthalten)!");
                        } else {
                            if (!POIUtil.isEmpty(inputSheet, currentRowIndex, i)) {
                                violationCounter++;
                                loggingFrame.appendLine("Feld " + POIUtil.getFieldIdentifier(currentColIndex, currentRowIndex) + " ist keine leer (sollte Zahl sein)!");
                            } else {
                                try {
                                    double d = POIUtil.getDoubleCellValueSafe(cell);
                                } catch (NumberFormatException ex) {
                                    violationCounter++;
                                    loggingFrame.appendLine("Feld " + POIUtil.getFieldIdentifier(currentColIndex, currentRowIndex) + " ist keine Zahl!");
                                }
                            }
                        }
                    } else if (constraintName.equals("Zahl oder leer")) {
                        try {
                            double d = POIUtil.getDoubleCellValueSafe(cell);
                        } catch (NumberFormatException ex) {
                            violationCounter++;
                            loggingFrame.appendLine("Feld " + POIUtil.getFieldIdentifier(currentColIndex, currentRowIndex) + " ist keine Zahl!");
                        }
                    } else if (constraintName.equals("Kleiner als")) {
                        double parameter = getConstraintParameterAsDouble();
                        try {
                            double cellValue = POIUtil.getDoubleCellValueSafe(cell);
                            if (cellValue >= parameter) {
                                violationCounter++;
                                loggingFrame.appendLine("Feld " + POIUtil.getFieldIdentifier(currentColIndex, currentRowIndex) + " ist nicht kleiner als " + parameter + "!");
                            }
                        } catch (NumberFormatException ex) {
                            violationCounter++;
                            loggingFrame.appendLine("Feld " + POIUtil.getFieldIdentifier(currentColIndex, currentRowIndex) + " ist keine Zahl!");
                        }
                    } else if (constraintName.equals("Größer als")) {
                        double parameter = getConstraintParameterAsDouble();
                        try {
                            double cellValue = POIUtil.getDoubleCellValueSafe(cell);
                            if (cellValue <= parameter) {
                                violationCounter++;
                                loggingFrame.appendLine("Feld " + POIUtil.getFieldIdentifier(currentColIndex, currentRowIndex) + " ist nicht größer als " + parameter + "!");
                            }
                        } catch (NumberFormatException ex) {
                            violationCounter++;
                            loggingFrame.appendLine("Feld " + POIUtil.getFieldIdentifier(currentColIndex, currentRowIndex) + " ist keine Zahl!");
                        }
                    } else if (constraintName.equals("Ist")) {
                        String parameter = getConstraintParameterAsString();
                        String cellValue = POIUtil.getStringCellValueSafe(cell);
                        if (!parameter.equals(cellValue)) {
                            violationCounter++;
                            loggingFrame.appendLine("Feld " + POIUtil.getFieldIdentifier(currentColIndex, currentRowIndex) + " ist nicht gleich \"" + parameter + "\"!");
                        }
                    } else if (constraintName.equals("Ist nicht")) {
                        String parameter = getConstraintParameterAsString();
                        String cellValue = POIUtil.getStringCellValueSafe(cell);
                        if (parameter.equals(cellValue)) {
                            violationCounter++;
                            loggingFrame.appendLine("Feld " + POIUtil.getFieldIdentifier(currentColIndex, currentRowIndex) + " ist gleich \"" + parameter + "\"!");
                        }
                    }
                }
                currentRowIndex++;
            }
            loggingFrame.appendLine("------");
        }
        loggingFrame.appendLine("-------------------------------");
        loggingFrame.appendLine("Insgesamt " + violationCounter + " Fehler gefunden");
        if (violationCounter == 0) {
            JOptionPane.showMessageDialog(this, "Die Überprüfung verlief ohne Fehler!", "Erfolg", JOptionPane.INFORMATION_MESSAGE, CalculationFrame.okIcon);
        } else {
            JOptionPane.showMessageDialog(this, "Einige Daten passen nicht zum vorgegebenen Schema!", "Fehler", JOptionPane.ERROR_MESSAGE, CalculationFrame.piIcon);
        }
}//GEN-LAST:event_okButtonActionPerformed

    private void selectInputFilesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectInputFilesButtonActionPerformed
        //Let the user select the files to load
        inputFileChooser.setDialogTitle("Eingabedateien auswählen");
        inputFileChooser.setMultiSelectionEnabled(true);
        if (inputFileChooser.showOpenDialog(this) != JFileChooser.APPROVE_OPTION) {
            return;
        }
        File[] dataFiles = inputFileChooser.getSelectedFiles();
        if (dataFiles.length == 0) {
            return; //No files to be processed
        }
        //Reset the input workbook data
        try {
            for (File dataFile : dataFiles) {
                Workbook workbook = POIUtil.loadWorkbook(dataFile);
                inputWorkbooks.add(workbook);
                workbookToFilename.put(workbook, dataFile.getName());
            }
        } catch (IOException ex) {
            inputStatusLabel.setIcon(CalculationFrame.errorIcon);
            inputStatusLabel.setText("Eingabefehler - bitte Vorlage erneut laden!");
            inputsSet = false;
            return;
        } catch (InvalidFormatException ex) {
            JOptionPane.showMessageDialog(this, "Fehler beim Lesen der Vorlage: Das Dateiformat wird nicht unterstützt: " + ex.getLocalizedMessage(), "Format nicht unterstützt", JOptionPane.ERROR_MESSAGE, CalculationFrame.errorIcon);
            inputStatusLabel.setIcon(CalculationFrame.errorIcon);
            inputStatusLabel.setText("Formatfehler - bitte Vorlage erneut laden!");
            inputsSet = false;
            return;
        }
        //Set the status message
        inputsSet = true;
        inputStatusLabel.setIcon(CalculationFrame.okIcon);
        inputStatusLabel.setText(dataFiles.length + " Eingabedateien erfolgreich geladen");
}//GEN-LAST:event_selectInputFilesButtonActionPerformed

    private void colCountSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_colCountSpinnerStateChanged
        currentColumnSpinner.setMaximum(colCountSpinner.getIntValue());
    }//GEN-LAST:event_colCountSpinnerStateChanged

    private void currentColumnSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_currentColumnSpinnerStateChanged
        int currentColumn = currentColumnSpinner.getIntValue();
        if (constraints.get(currentColumn) == null) {
            currentConstraint = new Constraint("Keine", "");
            constraints.put(currentColumn, currentConstraint);
        } else {
            currentConstraint = constraints.get(currentColumn);
        }
        constraintTypeComboBox.setSelectedItem(currentConstraint.getName());
        constraintParameterField.setText(currentConstraint.getParam());
    }//GEN-LAST:event_currentColumnSpinnerStateChanged

    private void constraintParameterFieldPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_constraintParameterFieldPropertyChange
        int currentColumn = currentColumnSpinner.getIntValue();
        if (constraints.get(currentColumn) == null) {
            currentConstraint = new Constraint("Keiner", null);
            constraints.put(currentColumn, currentConstraint);
        }
        currentConstraint.setParam(constraintParameterField.getText().toString());
    }//GEN-LAST:event_constraintParameterFieldPropertyChange

    private void constraintTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_constraintTypeComboBoxActionPerformed
        int currentColumn = currentColumnSpinner.getIntValue();
        if (constraints.get(currentColumn) == null) {
            currentConstraint = new Constraint("Keiner", null);
            constraints.put(currentColumn, currentConstraint);
        }
        currentConstraint.setName(constraintTypeComboBox.getSelectedItem().toString());
    }//GEN-LAST:event_constraintTypeComboBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new DataValidationFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Spalte;
    private javax.swing.JLabel colCountLabel;
    private schoolalyzer.ui.NumberSpinner colCountSpinner;
    private javax.swing.JLabel constraintLabel;
    private javax.swing.JTextField constraintParameterField;
    private javax.swing.JComboBox constraintTypeComboBox;
    private javax.swing.JLabel constraintsLabel;
    private schoolalyzer.ui.NumberSpinner currentColumnSpinner;
    private javax.swing.JLabel inputFilesLabel;
    private javax.swing.JLabel inputStatusLabel;
    private javax.swing.JButton okButton;
    private javax.swing.JLabel parameterLabel;
    private javax.swing.JButton selectInputFilesButton;
    private javax.swing.JLabel sheetIndexLabel;
    private schoolalyzer.ui.NumberSpinner sheetIndexSpinner;
    private javax.swing.JLabel startColLabel;
    private javax.swing.JSpinner startColSpinner;
    private javax.swing.JLabel startRowLabel;
    private schoolalyzer.ui.NumberSpinner startRowSpinner;
    // End of variables declaration//GEN-END:variables
}
